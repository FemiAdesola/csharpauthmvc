@inject Microsoft.AspNetCore.Authorization.IAuthorizationService Authoriation

@{
    ViewData["Title"] = "Home Page";
}


@* @{
    var isAdmin = await Authoriation.AuthorizeAsync(User, null, "Admin");
} *@

<div class="text-center">
    <h1 class="display-4">Welcome</h1>

    @if (User.Identity!.IsAuthenticated)
    {
        var twofactor = ViewData["TwoFactorEnabled"];
        if (twofactor != null && twofactor.ToString()!.ToLower() == "true")
        {
            <a asp-action="RemoveAuthenticator" asp-controller="Account" class="btn btn-warning">
                Reset & Remove Two Factor Auth
                </a>
        }
        else
        {
            <a asp-action="EnableAuthenticator" asp-controller="Account">Setup Two Factor Auth</a>
        }
        <br /><br />

        @* @if (isAdmin.Succeeded) *@
         @if (User.IsInRole("Admin"))
        {
            <h2>Your role is - Admin</h2>
        }
        else
        {
            <h2>Your role is - User</h2>
        }
    }

    <div class="text-center">
    <div class="mainText">
        <h2 class="display-4 text-capitalize text-black">Welcome to Femi Adesola's page</h2>
        <h3 class="mainSubTitle">This is an ASP.NET Core Identity for Authentication and Authorization built with MVC.
            This project aims to understand how identity management in C# works with roles, claims, and policy. In the real world, user management is important and required.
        </h3>
    </div>
    <img class="mainImage" src="~/images/front.png" />
    <br />
</div>
</div>
